/*
Script Author: Yui Chy
*/

if (typeof $request !== 'undefined' && $request) {
    let url = $request.url;

    let keyPattern = /^https:\/\/testflight\.apple\.com\/v3\/accounts\/(.*?)\/apps/;
    let key = url.match(keyPattern) ? url.match(keyPattern)[1] : null;
    
    const handler = (appIdMatch) => {
        if (appIdMatch && appIdMatch[1]) {
            let appId = appIdMatch[1];
            let existingAppIds = $persistentStore.read('APP_ID');
            let appIdSet = new Set(existingAppIds ? existingAppIds.split(',') : []);
            if (!appIdSet.has(appId)) {
                appIdSet.add(appId);
                $persistentStore.write(Array.from(appIdSet).join(','), 'APP_ID');
                $notification.post('ƒê√£ l·∫•y ƒë∆∞·ª£c APP_ID', '', `ƒê√£ l·∫•y v√† l∆∞u tr·ªØ APP_ID: ${appId}`, {"auto-dismiss": 2});
                console.log(`ƒê√£ l·∫•y v√† l∆∞u tr·ªØ APP_ID: ${appId}`);
            } else {
                $notification.post('APP_ID Tr√πng l·∫∑p', '', `APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.`, {"auto-dismiss": 2});
                console.log(`APP_ID: ${appId} ƒë√£ t·ªìn t·∫°i, kh√¥ng c·∫ßn th√™m l·∫°i.`);
            }
        } else {
            console.log('Kh√¥ng l·∫•y ƒë∆∞·ª£c APP_ID h·ª£p l·ªá t·ª´ TestFlight');
        }
    };

    if (/^https:\/\/testflight\.apple\.com\/v3\/accounts\/.*\/apps$/.test(url) && key) {
        let headers = Object.fromEntries(Object.entries($request.headers).map(([key, value]) => [key.toLowerCase(), value]));
        let session_id = headers['x-session-id'];
        let session_digest = headers['x-session-digest'];
        let request_id = headers['x-request-id'];

        $persistentStore.write(session_id, 'session_id');
        $persistentStore.write(session_digest, 'session_digest');
        $persistentStore.write(request_id, 'request_id');
        $persistentStore.write(key, 'key');

        let existingAppIds = $persistentStore.read('APP_ID');
        if (!existingAppIds) {
            $notification.post('Th√¥ng tin l·∫•y th√†nh c√¥ng üéâ', '', 'Vui l√≤ng l·∫•y APP_ID v√† ch·ªânh s·ª≠a tham s·ªë m√¥-ƒëun ƒë·ªÉ t·∫Øt script n√†y', {"auto-dismiss": 10});
        }
        console.log(`Th√¥ng tin l·∫•y th√†nh c√¥ng: session_id=${session_id}, session_digest=${session_digest}, request_id=${request_id}, key=${key}`);
    } else if (/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/.test(url)) {
        const appIdMatch = url.match(/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/);
        handler(appIdMatch);
    } else if (/v3\/accounts\/.*\/ru/.test(url)) {
        const appIdMatch = url.match(/v3\/accounts\/.*\/ru\/(.*)/);
        handler(appIdMatch);
    }

    $done({});
} else {
    !(async () => {
        let ids = $persistentStore.read('APP_ID');
        if (!ids) {
            console.log('Kh√¥ng t√¨m th·∫•y APP_ID');
            $done();
        } else {
            ids = ids.split(',');
            for await (const ID of ids) {
                await autoPost(ID, ids);
            }
            if (ids.length === 0) {
                $notification.post('ƒê√£ tham gia t·∫•t c·∫£ TestFlight üéâ', '', 'M√¥-ƒëun ƒë√£ t·ª± ƒë·ªông ƒë√≥ng', {"sound": true});
                $done($httpAPI('POST', '/v1/modules', {'Gi√°m s√°t c√¥ng khai': false}));
            } else {
                $done();
            }
        }
    })();
}

async function autoPost(ID, ids) {
    let Key = $persistentStore.read('key');
    let testurl = `https://testflight.apple.com/v3/accounts/${Key}/ru/`;
    let header = {
        'X-Session-Id': $persistentStore.read('session_id'),
        'X-Session-Digest': $persistentStore.read('session_digest'),
        'X-Request-Id': $persistentStore.read('request_id'),
        'User-Agent': 'Oasis/3.5.1 OasisBuild/425.2 iOS/17.5.1 model/iPhone14,3 hwp/t8110 build/21F90 (6; dt:256) AMS/1 TSE/0',
        'Pragma': 'no-cache',
        'Accept': 'application/json',
        'Host': 'testflight.apple.com',
        'X-Apple-Store-Front': '143441-43,29',
        'Accept-Encoding': 'br, gzip, deflate',
        'Accept-Language': 'vi',
        'X-Apple-TA-Device': 'iPhone14,3 iPhone13,4',
        'X-Apple-AMD-M': '0hYxEBrrJeJgrF1kj2jbNIFgwZXFN6VcVWdB1RgEsc48ptRUvUvzS8KKglTq1AFnJz9G6HUHybjPk7Km',
        'Connection': 'keep-alive',
        'Content-Type': 'application/json',
        'X-Apple-Device-Model': 'iPhone14,3'
    };

    return new Promise((resolve) => {
        $httpClient.get({ url: testurl + ID, headers: header }, (error, response, data) => {
            if (error) {
                console.log(`${ID} Y√™u c·∫ßu m·∫°ng th·∫•t b·∫°i: ${error}Ôºågi·ªØ l·∫°i APP_ID`);
                resolve();
                return;
            }

            if (response.status === 500) {
                console.log(`${ID} L·ªói m√°y ch·ªß, m√£ tr·∫°ng th√°i 500, gi·ªØ l·∫°i APP_ID`);
                resolve();
                return;
            }

            if (response.status !== 200) {
                console.log(`${ID} Kh√¥ng ph·∫£i li√™n k·∫øt h·ª£p l·ªá: m√£ tr·∫°ng th√°i ${response.status}Ôºåx√≥a APP_ID`);
                ids.splice(ids.indexOf(ID), 1);
                $persistentStore.write(ids.join(','), 'APP_ID');
                $notification.post('Kh√¥ng ph·∫£i li√™n k·∫øt TestFlight h·ª£p l·ªá', '', `${ID} ƒë√£ b·ªã x√≥a`, {"auto-dismiss": 2});
                resolve();
                return;
            }

            let jsonData;
            try {
                jsonData = JSON.parse(data);
            } catch (parseError) {
                console.log(`${ID} Gi·∫£i m√£ ph·∫£n h·ªìi th·∫•t b·∫°i: ${parseError}Ôºågi·ªØ l·∫°i APP_ID`);
                resolve();
                return;
            }

            if (!jsonData || !jsonData.data) {
                console.log(`${ID} Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùi, gi·ªØ l·∫°i APP_ID`);
                resolve();
                return;
            }

            if (jsonData.data.status === 'FULL') {
                console.log(`${ID} Ch·∫ø ƒë·ªô th·ª≠ nghi·ªám ƒë√£ ƒë·∫ßy, gi·ªØ l·∫°i APP_ID`);
                resolve();
                return;
            }

            $httpClient.post({ url: testurl + ID + '/accept', headers: header }, (error, response, body) => {
                if (!error && response.status === 200) {
                    let jsonBody;
                    try {
                        jsonBody = JSON.parse(body);
                    } catch (parseError) {
                        console.log(`${ID} Y√™u c·∫ßu tham gia th·∫•t b·∫°i: ${parseError}Ôºågi·ªØ l·∫°i APP_ID`);
                        resolve();
                        return;
                    }

                    console.log(`${jsonBody.data.name} ƒê√£ tham gia TestFlight th√†nh c√¥ng`);
                    ids.splice(ids.indexOf(ID), 1);
                    $persistentStore.write(ids.join(','), 'APP_ID');
                    if (ids.length > 0) {
                        $notification.post(jsonBody.data.name + ' ƒê√£ tham gia TestFlight th√†nh c√¥ng', '', `Ti·∫øp t·ª•c x·ª≠ l√Ω APP ID: ${ids.join(',')}`, {"sound": true});
                    } else {
                        $notification.post(jsonBody.data.name + ' ƒê√£ tham gia TestFlight th√†nh c√¥ng', '', 'ƒê√£ x·ª≠ l√Ω t·∫•t c·∫£ APP ID', {"sound": true});
                    }
                } else {
                    console.log(`${ID} Tham gia th·∫•t b·∫°i: ${error || `M√£ tr·∫°ng th√°i ${response.status}`}Ôºågi·ªØ l·∫°i APP_ID`);
                }
                resolve();
            });
        });
    });
}
